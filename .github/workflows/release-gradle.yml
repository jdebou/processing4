name: Releases
on: workflow_dispatch

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.tag_info.outputs.revision }}
      version: ${{ steps.tag_info.outputs.version }}
    steps:
      - name: Extract version and revision
        id: tag_info
        shell: bash
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          REVISION=1.1
          VERSION=1.1.5

          # Set outputs for use in later jobs or steps
          echo "revision=$REVISION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
  build:
    name: (${{ matrix.os_prefix }}/${{ matrix.arch }}) Create Processing Release
    runs-on: ${{ matrix.os }}
    needs: version
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            os_prefix: windows
            arch: x64
            binary: msi/Processing-${{ needs.version.outputs.version }}
            extension: msi
    steps:
      - name: Install Certificates for Code Signing
        if: runner.os == 'macOS'
        continue-on-error: true
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      - name: Install Snapcraft
        if: runner.os == 'Linux'
        uses: samuelmeuli/action-snapcraft@v3
      - name: Install LXD
        if: runner.os == 'Linux'
        uses: canonical/setup-lxd@main

      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          java-version: '17.0.8'
          distribution: 'temurin'
          architecture: ${{ matrix.arch }}
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew packageDistributionForCurrentOS
        env:
          ORG_GRADLE_PROJECT_version: ${{ needs.version.outputs.version }}
          ORG_GRADLE_PROJECT_group: ${{ vars.GRADLE_GROUP }}
          ORG_GRADLE_PROJECT_revision: ${{ needs.version.outputs.revision }}
          ORG_GRADLE_PROJECT_compose.desktop.verbose: true
          ORG_GRADLE_PROJECT_compose.desktop.mac.sign: ${{ secrets.PROCESSING_SIGNING }}
          ORG_GRADLE_PROJECT_compose.desktop.mac.signing.identity: ${{ secrets.PROCESSING_SIGNING_IDENTITY }}
          ORG_GRADLE_PROJECT_compose.desktop.mac.notarization.appleID: ${{ secrets.PROCESSING_APPLE_ID }}
          ORG_GRADLE_PROJECT_compose.desktop.mac.notarization.password: ${{ secrets.PROCESSING_APP_PASSWORD }}
          ORG_GRADLE_PROJECT_compose.desktop.mac.notarization.teamID: ${{ secrets.PROCESSING_TEAM_ID }}
          ORG_GRADLE_PROJECT_snapname: ${{ vars.SNAP_NAME }}
      
      - name: Upload portables to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: processing-${{ needs.version.outputs.version }}-${{ matrix.os_prefix }}-${{ matrix.arch }}-portable.zip
          file: app/build/compose/binaries/main/Processing-${{ needs.version.outputs.version }}.zip

      - name: Upload installers to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: processing-${{ needs.version.outputs.version }}-${{ matrix.os_prefix }}-${{ matrix.arch }}.${{ matrix.extension }}
          file: app/build/compose/binaries/main/${{ matrix.binary }}.${{ matrix.extension }}

      - name: Upload snap to Snap Store
        if: runner.os == 'Linux'
        run: snapcraft upload --release=beta app/build/compose/binaries/main/${{ matrix.binary }}.${{ matrix.extension }}
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.PROCESSING_SNAPCRAFT_TOKEN }}

      
